#!/bin/bash

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to prompt user for input with default value
prompt_input() {
  local prompt="$1"
  local default="$2"
  local input

  read -r -p "$prompt [$default]: " input
  echo "${input:-$default}"
}

# Function to display progress bar
progress_bar() {
  local progress=$1
  local max=$2
  local bar_length=50
  local percent=$((progress * 100 / max))
  local completed=$((progress * bar_length / max))
  local remaining=$((bar_length - completed))

  printf "["
  printf "%*s" "$completed" | tr ' ' '='
  printf "%*s" "$remaining" | tr ' ' ' '
  printf "] %d%%\r" "$percent"
}

# Function to display a tab
tab() {
  printf "\t"
}

# Function to handle errors
handle_error() {
  local message="$1"
  echo "Error: $message" >&2
  exit 1
}

# Function to display usage output
display_usage() {
  echo "Usage: $0 <github_username> <github_email>"
  exit 1
}

# Function to update package repositories
update_repositories() {
  echo "Updating package repositories..."
  sudo apt update >/dev/null 2>&1 || handle_error "Failed to update package repositories."
  echo "Package repositories updated."
}

# Function to install Git
install_git() {
  echo "Installing Git..."
  if ! command_exists git; then
    sudo apt install git -y >/dev/null 2>&1 || handle_error "Failed to install Git."
    echo "Git installed."
  else
    echo "Git is already installed."
  fi
}

# Function to install xclip
install_xclip() {
  echo "Installing xclip..."
  if ! command_exists xclip; then
    sudo apt install xclip -y >/dev/null 2>&1 || handle_error "Failed to install xclip."
    echo "xclip installed."
  else
    echo "xclip is already installed."
  fi
}

# Function to configure Git
configure_git() {
  echo "Configuring Git..."
  if ! git config --get user.email >/dev/null 2>&1; then
    local github_username="$1"
    local github_email="$2"
    git config --global user.name "$github_username"
    git config --global user.email "$github_email"
    echo "Git configured."
  else
    echo "Git is already configured."
  fi
}

# Function to generate SSH key if it doesn't exist
generate_ssh_key() {
  local email="$1"
  local ssh_key_path=~/.ssh/id_rsa

  if [ ! -f "$ssh_key_path" ]; then
    echo "Generating SSH key..."
    ssh-keygen -t rsa -b 4096 -C "$email" -f "$ssh_key_path" >/dev/null 2>&1 || handle_error "Failed to generate SSH key."
    echo "SSH key generated."
  else
    echo "SSH key already exists at $ssh_key_path."
  fi
}

# Function to add SSH key to SSH agent
add_ssh_key_to_agent() {
  echo "Adding SSH key to SSH agent..."
  eval "$(ssh-agent -s)" >/dev/null 2>&1
  ssh-add ~/.ssh/id_rsa >/dev/null 2>&1 || handle_error "Failed to add SSH key to SSH agent."
  echo "SSH key added to SSH agent."
}

# Function to copy SSH public key to clipboard
copy_ssh_public_key() {
  echo "Copying SSH public key to clipboard..."
  if [ -f ~/.ssh/id_rsa.pub ]; then
    cat ~/.ssh/id_rsa.pub | xclip -sel clip >/dev/null 2>&1 || handle_error "Failed to copy SSH public key to clipboard."
    echo "SSH public key copied to clipboard. Please add it to your GitHub account."
    echo "You can now paste it using Ctrl+V."
  else
    handle_error "SSH public key not found. Please check if the key was generated."
  fi
}

# Main function
main() {
  local github_username="$1"
  local github_email="$2"

  update_repositories
  install_git
  install_xclip
  configure_git "$github_username" "$github_email"
  generate_ssh_key "$github_email"
  add_ssh_key_to_agent
  copy_ssh_public_key

  echo "Setup complete."
}

# Check if arguments are provided
if [ $# -ne 2 ]; then
  display_usage
fi

# Check if SSH key already exists
if [ -f ~/.ssh/id_rsa ]; then
  echo "SSH key already exists. Skipping key generation."
else
  echo "No existing SSH key found."
fi

# Check if Git is already configured
if git config --get user.email >/dev/null 2>&1; then
  echo "Git is already configured."
else
  echo "Git is not yet configured."
fi

# Call the main function with progress bars and tabs
main_with_progress() {
  tab
  progress_bar 0 7
  main "$@"
}

main_with_progress "$@"
